const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const signatureService = require('../../services/signatureService');
const logger = require('../../utils/logger');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('init-signature')
    .setDescription('Initialise le syst√®me de signature pour une promotion'),

  async execute(interaction) {
    try {
      // R√©pondre imm√©diatement pour √©viter le timeout
      await interaction.deferReply();
      
      // V√©rifier le canal d'administration
      const adminChannelId = process.env.ADMIN_CONFIG_CHANNEL_ID;
      const isAdminChannel = interaction.channelId === adminChannelId;
      
      if (!isAdminChannel) {
        return interaction.editReply({
          content: `Cette commande ne peut √™tre utilis√©e que dans le canal d'administration <#${adminChannelId}>`,
          ephemeral: true
        });
      }

      // R√©cup√©ration des promotions
      const promotions = await signatureService.getPromotions();
      
      if (!promotions || promotions.length === 0) {
        return interaction.editReply({
          content: 'Aucune promotion disponible pour le moment.',
          ephemeral: true
        });
      }

      // Cr√©er l'embed du message de configuration
      const signatureEmbed = new EmbedBuilder()
        .setTitle('üñãÔ∏è Configuration des Signatures')
        .setDescription('Utilisez ce message pour configurer et suivre les signatures pour les promotions.')
        .setColor('#00a8ff')
        .setFooter({ text: 'Bot de Signature v1.0' });

      // Cr√©er le menu de s√©lection des promotions
      const selectMenu = new StringSelectMenuBuilder()
        .setCustomId('signature-select-promotion')
        .setPlaceholder('S√©lectionnez une promotion')
        .addOptions(
          promotions.map(promo => ({
            label: promo.nom,
            value: promo.uuid,
            description: `Configurer les signatures pour ${promo.nom}`
          }))
        );

      // Cr√©er les boutons d'action
      const createButton = new ButtonBuilder()
        .setCustomId('signature-create-button')
        .setLabel('Cr√©er')
        .setStyle(ButtonStyle.Success)
        .setEmoji('‚úÖ');

      const refreshButton = new ButtonBuilder()
        .setCustomId('signature-refresh-button')
        .setLabel('Rafra√Æchir')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('üîÑ');

      // Assembler les composants
      const row1 = new ActionRowBuilder().addComponents(selectMenu);
      const row2 = new ActionRowBuilder().addComponents(createButton, refreshButton);

      // Envoyer le message
      await interaction.editReply({
        embeds: [signatureEmbed],
        components: [row1, row2]
      });

      logger.info(`Message de configuration de signature cr√©√© par ${interaction.user.tag}`);
    } catch (error) {
      logger.error(`Erreur lors de la cr√©ation du message de configuration: ${error.message}`, error);
      
      if (interaction.deferred) {
        await interaction.editReply({
          content: `Une erreur est survenue lors de la cr√©ation du message de configuration: ${error.message}`,
          ephemeral: true
        }).catch(err => logger.error('Erreur lors de l\'√©dition de la r√©ponse apr√®s erreur:', err));
      } else if (!interaction.replied) {
        await interaction.reply({
          content: `Une erreur est survenue lors de la cr√©ation du message de configuration: ${error.message}`,
          ephemeral: true
        }).catch(err => logger.error('Erreur lors de la r√©ponse apr√®s erreur:', err));
      }
    }
  }
}; 