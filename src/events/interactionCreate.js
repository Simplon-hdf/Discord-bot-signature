const { Events } = require('discord.js');
const logger = require('../utils/logger');
const signatureService = require('../services/signatureService');
const { EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');

// Variable pour stocker l'UUID de la promotion s√©lectionn√©e
let selectedPromotionUuid = null;

module.exports = {
  name: Events.InteractionCreate,
  async execute(interaction, client) {
    try {
      // Gestion des commandes slash
      if (interaction.isChatInputCommand()) {
        const command = client.commands.get(interaction.commandName);

        if (!command) {
          logger.warn(`Commande ${interaction.commandName} non trouv√©e`);
          return;
        }

        try {
          await command.execute(interaction, client);
        } catch (error) {
          logger.error(`Erreur lors de l'ex√©cution de la commande ${interaction.commandName}:`, error);
          
          const replyOptions = {
            content: 'Une erreur est survenue lors de l\'ex√©cution de cette commande.',
            ephemeral: true
          };
          
          if (interaction.replied || interaction.deferred) {
            await interaction.followUp(replyOptions);
          } else {
            await interaction.reply(replyOptions);
          }
        }
      }
      
      // Gestion des s√©lections dans les menus
      else if (interaction.isStringSelectMenu()) {
        // Menu de s√©lection de promotion pour la liste des promos
        if (interaction.customId === 'select-promotion') {
          const selectedPromoUuid = interaction.values[0];
          logger.info(`Promotion s√©lectionn√©e: ${selectedPromoUuid}`);
          
          await interaction.reply({
            content: `Vous avez s√©lectionn√© la promotion avec l'UUID: ${selectedPromoUuid}. Fonctionnalit√© en cours de d√©veloppement.`,
            ephemeral: true
          });
        }
        
        // Menu de s√©lection de promotion pour le message de configuration
        else if (interaction.customId === 'signature-select-promotion') {
          selectedPromotionUuid = interaction.values[0];
          
          // Trouver la promotion s√©lectionn√©e
          const promotions = await signatureService.getPromotions();
          const selectedPromo = promotions.find(promo => promo.uuid === selectedPromotionUuid);
          
          if (!selectedPromo) {
            await interaction.reply({
              content: 'Impossible de trouver la promotion s√©lectionn√©e.',
              ephemeral: true
            });
            return;
          }
          
          await interaction.reply({
            content: `Vous avez s√©lectionn√© la promotion: ${selectedPromo.nom}. Cliquez sur "Cr√©er" pour g√©n√©rer le thread de signature.`,
            ephemeral: true
          });
        }
      }
      
      // Gestion des clics sur les boutons
      else if (interaction.isButton()) {
        // Bouton de cr√©ation de thread de signature
        if (interaction.customId === 'signature-create-button') {
          if (!selectedPromotionUuid) {
            await interaction.reply({
              content: 'Veuillez d\'abord s√©lectionner une promotion dans le menu d√©roulant.',
              ephemeral: true
            });
            return;
          }
          
          // Trouver la promotion s√©lectionn√©e
          const promotions = await signatureService.getPromotions();
          const selectedPromo = promotions.find(promo => promo.uuid === selectedPromotionUuid);
          
          if (!selectedPromo) {
            await interaction.reply({
              content: 'Impossible de trouver la promotion s√©lectionn√©e.',
              ephemeral: true
            });
            return;
          }
          
          await interaction.deferReply({ ephemeral: true });
          
          // Ici, la logique de cr√©ation du thread de signature
          // (sera impl√©ment√©e ult√©rieurement)
          logger.info(`Cr√©ation d'un thread de signature pour la promotion: ${selectedPromo.nom}`);
          
          await interaction.editReply({
            content: `La cr√©ation du thread de signature pour la promotion ${selectedPromo.nom} est en cours de d√©veloppement.`,
            ephemeral: true
          });
        }
        
        // Bouton de rafra√Æchissement de la liste des promotions
        else if (interaction.customId === 'signature-refresh-button') {
          await interaction.deferUpdate();
          
          // R√©cup√©rer la liste mise √† jour des promotions
          const promotions = await signatureService.getPromotions();
          
          if (!promotions || promotions.length === 0) {
            await interaction.followUp({
              content: 'Aucune promotion n\'est disponible actuellement.',
              ephemeral: true
            });
            return;
          }
          
          // Mettre √† jour le menu d√©roulant
          const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('signature-select-promotion')
            .setPlaceholder('Choisir une promotion')
            .addOptions(
              promotions.map(promo => ({
                label: promo.nom,
                description: `${promo.apprenants.length} apprenants, ${promo.formateurs.length} formateurs`,
                value: promo.uuid
              }))
            );
            
          // Recr√©er les boutons
          const createButton = new ButtonBuilder()
            .setCustomId('signature-create-button')
            .setLabel('Cr√©er')
            .setStyle(ButtonStyle.Success)
            .setEmoji('‚úÖ');
            
          const refreshButton = new ButtonBuilder()
            .setCustomId('signature-refresh-button')
            .setLabel('Rafra√Æchir')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('üîÑ');
            
          // Assembler les composants
          const selectRow = new ActionRowBuilder().addComponents(selectMenu);
          const buttonRow = new ActionRowBuilder().addComponents(createButton, refreshButton);
          
          // Mettre √† jour le message
          await interaction.message.edit({
            components: [selectRow, buttonRow]
          });
          
          await interaction.followUp({
            content: 'La liste des promotions a √©t√© rafra√Æchie.',
            ephemeral: true
          });
          
          logger.info(`${interaction.user.tag} a rafra√Æchi la liste des promotions`);
        }
      }
    } catch (error) {
      logger.error('Erreur inattendue lors du traitement de l\'interaction:', error);
      
      // Essayer d'informer l'utilisateur de l'erreur
      try {
        if (!interaction.replied && !interaction.deferred) {
          await interaction.reply({
            content: 'Une erreur inattendue est survenue lors du traitement de votre interaction.',
            ephemeral: true
          });
        } else if (interaction.deferred) {
          await interaction.editReply({
            content: 'Une erreur inattendue est survenue lors du traitement de votre interaction.',
            ephemeral: true
          });
        }
      } catch (replyError) {
        logger.error('Impossible de r√©pondre √† l\'interaction apr√®s une erreur:', replyError);
      }
    }
  },
}; 